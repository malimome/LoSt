/*******************************************************************************
 * server.cpp
 *
 *
 * This file defines the function performed by the server in the POR
 * scheme i.e, to generate a response to the client's challenge 
 *
 * 
 *******************************************************************************/


#include "ecc.h"

/* prime is generated in the file "por.cpp" and external linkage
   allows it to be accessed in this file */
extern mpz_t prime; //hardcoded

extern const int sec_size; //hardcoded - it should be the size of the prime

/* Challenege set (Indices + Coefficients) from client */
extern unsigned long *indexSet;
extern mpz_t *coeff;

/* response generated by server (prover) */
mpz_t sigma,meu[s];

void server(unsigned long l)
{
   int i,j,k;
   char mpzBuff[1024] = {0};
   get_prime();

   mpz_t msg_sect,au;

   long numbytes1,numbytes2;

   mpz_init(sigma);
   mpz_init(msg_sect);
   mpz_init(au);

   for(i=0;i<s;i++)
    mpz_init(meu[i]);

   /* to read a sector from file */
   unsigned char buf1[sec_size];

   /* to read an authenticator from file */
   unsigned char buf2[p_size];


   FILE *fp1, *fp2;
   if ((fp1 = fopen("Encoded","rb"))==NULL) 
   { 
       cout<<"Cannot open file.\n";
       exit(0);
   }

   if ((fp2 = fopen("Authenticators","rb"))==NULL) 
   { 
      cout<<"Cannot open file.\n";
      exit(0);
   }

   for(i=0;i<l;i++)
   {

     numbytes2 = (indexSet[i])*p_size;  

     /* Sets the file pointer just before the required authenticator in
        the file "Authenticators" by seeking 'numbytes2' bytes from the 
        beginning of the file */
     fseek(fp2,numbytes2,SEEK_SET);

     fread(buf2,1,p_size,fp2);

     mpz_import(au,p_size,1,1,0,0,buf2);

     /* sigma = sigma + (coeff[i] * au) */
     mpz_addmul(sigma,coeff[i],au);
 
     /* sigma = sigma % prime */
     mpz_mod(sigma,sigma,prime);
   }

   mpz_get_str(mpzBuff, 10, sigma);
   cout<<"Sigma at server: "<<mpzBuff<<endl;
  

   for(i=0;i<l;i++)
   {
       numbytes1 = (indexSet[i])*(sec_size)*s;

       /* Sets the file pointer just before the required message block in
        the file "Encoded" by seeking 'numbytes1' bytes from the 
        beginning of the file */
       fseek(fp1,numbytes1,SEEK_SET);

       for(j=0;j<s;j++)
       {
         for(k=0;k<sec_size;k++)
           buf1[k]=0;

         fread(buf1,1,sec_size,fp1);

         mpz_import(msg_sect,sec_size,1,1,0,0,buf1);

         /* meu[j] = meu[j] + (coeff[i] * msg_sect) */
         mpz_addmul(meu[j],coeff[i],msg_sect); 

         /* meu[j] = meu[j] % prime */
         mpz_mod(meu[j],meu[j],prime);
       }
   }

   
   fclose(fp1);
   fclose(fp2); 

}
